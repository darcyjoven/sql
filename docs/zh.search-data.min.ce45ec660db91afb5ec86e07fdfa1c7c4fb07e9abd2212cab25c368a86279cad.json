[{"id":0,"href":"/docs/SQL/","title":"SQL--结构化查询语言","section":"Docs","content":"SQL 结构化查询语言\r#\r\rDDL 数据定义\r#\r\r建表（必须掌握，简单）\r#\r\r修改表（必须掌握，简单）\r#\r\r删除表（必须掌握，简单）\r#\r\r主键（一般掌握，中等）\r#\r\r索引（一般掌握，中等）\r#\r\r外键（了解，中等）\r#\r\rDML 数据操作\r#\r\r新增（必须掌握，简单）\r#\r\r修改（必须掌握，简单）\r#\r\r删除（必须掌握，简单）\r#\r\rSELECT 查询\r#\r\r查询结果\u0026ndash;字段（必须掌握，简单）\r#\r\r查询来源\u0026ndash;表（必须掌握，简单）\r#\r\r查询条件\u0026ndash;判断语句（必须掌握，中等\r#\r\r[查询排序\u0026ndash;ORDER BY（必须掌握，简单](./first/SELECT/#顺序\u0026ndash;排序（order by）)\r#\r\r多表查询（必须掌握，中等）\r#\r\r聚合（必须掌握，中等）\r#\r\r嵌套（一般掌握，简单）\r#\r\r常用函数（一般掌握，中等）\r#\r\r建立视图（必须掌握，中等）\r#\r\r修改视图（必须掌握，中等）\r#\r\r删除视图（必须掌握，中等）\r#\r\r"},{"id":1,"href":"/docs/SQL/hidden/","title":"SQL--结构化查询语言","section":"SQL--结构化查询语言","content":"DDL 数据定义语句\r#\r\r CREATE TABLE ** 需掌握程度 *** ALTER TABLE ** 需掌握程度 *** DROP TABLE * 需掌握程度 ** CREATE INDEX *** 需掌握程度 ** DROP INDEX * 需掌握程度 **  DML 数据操纵语句\r#\r\r  SELECT 难度 ***** 需掌握程度 ****\n 基本语法 cloumn unique/distinct where and、or、not limit order by rownum 聚合 group by min、max count、avg、sum having like (*、？) in、between 子查询（查询嵌套） exists case 别名 join  inner join left/right (outer) join full (outer) join   union (all) insert into select    UPDATE 难度 ** 需掌握程度 ****\n  DELETE 难度 * 需掌握程度 ****\n  INSERT INTO 难度 ** 需掌握程度 ****\n  MERGE 难度 *** 需掌握程度 **\n  "},{"id":2,"href":"/docs/SQL/first/DDL/","title":"DDL--数据定义言","section":"SQL--结构化查询语言","content":"DDL\u0026ndash;数据定义语言\r#\r\r 数据通过表存在数据库中 不区分大小写 表中规定每列的数据名称和数据类型 表结构影响后续数据的存储和检索  ORACLE 数据库结构\r#\r\r 库 TOPPROD 不能库之间只能通过网络通信 用户 FOREWIN 可以直接访问 表 TABLE 存储的基本单元 行 row 每个数据的最小表达方式  建立表\r#\r\rcreate student(  name varchar2(100),  age number(5),  score number(4,2),  birthday date ) 以上代码运行后创建了一个名称 student 的表，其中\n studnet 表名，在有同一个用户中，不能重名，需要满足标识符要求 name 列名，在同一个表中，不能重名，需要满足标识符要求 varchar2(100) 数据类型  oracle 数据类型\r#\r\r date 日期 number() 数字类型 number(5) 为 5 位的小数 number(5,2) 位 5 位，有 2 位小数 blob/clob 二进制大数据 varchar2(100) 长度为 100 的字符串 timestamp 时间戳 （精确到 10 位的秒）  修改表\r#\r\r已有表的修改，请注意已有资料的情况\n增加字段\r#\r\r 无论什么情况，都可以增加字段\n alter table student add (  class varchar2(20),  parent varchar2(20) ) 以上在 student 中增加了两个字段\n减少字段\r#\r\r 如果要减少的字段有任意一笔不为空的资料，不允许删除字段，所以删除字段前，需要先清空字段资料\n \rUPDATE语法\nupdate student set parent = null; alter table student drop column parent;  更新字段值为null 删除字段  修改字段\r#\r\r 修改字段无论是数据类型，还是字段名称，如果已有资料也无法修改\n 通过删除字段\r#\r\r\rUPDATE语法\n 新建临时字段存储要修改列的值 将旧字段值设置为 null 后删除 新增要新增的列 新列的值设置为临时字段 删除临时字段   此方式，最后修改的字段总是在最后\n alter table student add name2 varchar(100); update student set name2 = name; update student set name = null; alter table student drop column name; alter table student add id varchar2(100); update student set id = name2; update student set name2 = null; alter table student drop column name2; 通过重建表\r#\r\r\rUPDATE语法\n 新建临时表存储现表资料 删除现表 重建建立表 将临时表资料储存到新表 删除临时表   此方式，字段的顺序可以受到控制\n create table student2 as select * from student; drop table student; create table student (  id varchar2(100),  age number(5),  score number(4,2),  birthday date ); insert into student select * from student2; drop table student2; 删除表\r#\r\r 删除表比较简单，但要注意备份资料\n drop table student; 主键\r#\r\r将一个或多个字段设置为主键，可以保证资料不重复。\n 一个表最多存在 1 个主键，可以没有主键。主键名和表名一样，在用户中不可重复。\n 例如：身份证，ID 号这些不重复的字段。如果是班级的话，xx 届和 xx 班，两字段加在一起这样也是不重复的。\n创建表时创建主键\r#\r\rcreate table student (  id varchar2(100),  age number(5),  score number(4,2),  birthday date,  constraint student_pk primary key(id) ) 创建表后创建主键\r#\r\rcreate table student (  id varchar2(100),  age number(5),  score number(4,2),  birthday date,  constraint student_pk primary key(id) ); alter table student add constraint student_pk primary key (id); 索引\r#\r\r 索引在表中相当于时目录，如果查询时，走索引速度提升很多。（只在巨量数据时有明显效果，数据库量不多时，没必要考虑索引）\n  查询通过索引可以提高查询速度，但会降低增删改的速度 一个表可以建立多个索引 只有数据量多的时候索引才会明显提升查询速度 只有合适的查询（SELECT）语句才能使用索引查询  创建索引\r#\r\rcreate index student_idx on student(id,age); 删除索引\r#\r\rdrop index student_idx; 重建索引\r#\r\r 删除重新创建即可\n drop index student_idx; create index student_idx on student(id,age); 外键\r#\r\r当a表c1字段必须时b表d1字段中的一个的时候，可以将c1设置为d1字段的外键。这样在新增a表资料时，c1字段会自动检查是否在b表中存在，不存在不允许新增该资料。\n 创建外键，会时两个表耦合性增加，且不利于问题排查，所以不建议使用，了解有这个东西即可。这个检查可以通过代码实现。\n 创建\r#\r\r 创建表时创建  create table class (  id number(10) ); create table student(  id number(10),  class number(10)  constraint student_fk  foreign key (class)  references class (id) ); 创建表后创建  create table class (  id number(10) ); create table student(  id number(10),  class number(10) ); alter table student add constraint student_fk  foreign key (class)  references class (id); 删除\r#\r\ralter table student drop constraint student_fk 重建\r#\r\r删除后重新添加即可\n"},{"id":3,"href":"/docs/SQL/first/DML/","title":"DML--数据操作语言","section":"SQL--结构化查询语言","content":"DML\u0026ndash;数据操作语言\r#\r\r新增\r#\r\r已知表student结构如下:\ncreate table student(  id number(10),  name varchar(20),  sex varchar(20),  age number(5),  birthday date ) insert into student values(1,\u0026#39;张三\u0026#39;,\u0026#39;男\u0026#39;,19,to_date(\u0026#39;951221\u0026#39;,\u0026#39;yymmdd\u0026#39;)); insert into student (name,id,age) values(\u0026#39;小红\u0026#39;,2,19); 修改\r#\r\r ID NAME SEX AGE BIRTHDAY\r----------- -------------------- -------------------- ------ -----------\r1 张三 男 19 2095-12-21\r2 小红 19  student资料如上\n-- 1.更新小红性别为女 update student set sex=\u0026#39;女\u0026#39; where name=\u0026#39;小红\u0026#39;; -- 2.将所有人年龄更新为12 update student set age=12; 删除\r#\r\r ID NAME SEX AGE BIRTHDAY\r----------- -------------------- -------------------- ------ -----------\r1 张三 男 12 2095-12-21\r2 小红 女 12  student资料如上\n-- 1. 删除所有性别为男资料 delete from student where sex=\u0026#39;男\u0026#39;; -- 2. 删除所有资料 delete from student;  update和delete使用到了where语句，我们在select中会详细介绍和使用。\n "},{"id":4,"href":"/docs/SQL/first/SELECT/","title":"查询语句详解","section":"SQL--结构化查询语言","content":"SELECT\u0026ndash;查询语句详解\r#\r\r查询语句组成\r#\r\r结果\u0026ndash;字段（select）\r#\r\r 查询语句的最前面\n select 字段1,字段2,字段3,\u0026#39;6班\u0026#39; 班级  * 匹配所有字段:  select * select student.*,class.*   字面常量： 数值和字符串都可以以字面常量作为字段结果\n  别名：\n  select id,name 姓名,age as 年纪 查询结果中会以别名显示\n 字段运算:  select id,\u0026#39;姓名\u0026#39;||name,age+2 查询字段可以进行字段运算，字符串拼接为||拼接，数学运算符号+-*/都可以使用\n 判断语句： SQL 中判断语句比较特殊，它只能返回一个值，且每个分支返回值必须一致。  -- 从一个变量的值判断 select case sex when \u0026#39;男\u0026#39; then \u0026#39;我是男生\u0026#39; when \u0026#39;女\u0026#39; then \u0026#39;我是女生\u0026#39; else \u0026#39;我是人妖\u0026#39; end as 性别 -- 从条件表达式判断 select case when age \u0026lt; 8 then \u0026#39;小学生\u0026#39; when age \u0026lt; 16 then \u0026#39;初中生\u0026#39; when age \u0026lt; 24 \u0026#39;大学生\u0026#39; else \u0026#39;老人\u0026#39; end as 年纪 来源\u0026ndash;表（from）\r#\r\r 必须在字段之后\n from student,class  别名：  from student as s  表字段:  select s.id,class.id from student as s,class 当多个表中字段有重名时，使用字段必须指定字段属于哪个表\n条件\u0026ndash;判断语句（where）\r#\r\r 必须放在 from 之后\n where student.id \u0026gt; 1 and student.name like \u0026#39;张%\u0026#39; and student.id=class.id and (student.age \u0026gt; 18 or student.age \u0026lt; 10) and student.birth between to_date(\u0026#39;2000-01-01\u0026#39;,\u0026#39;yyyy-mm-dd\u0026#39;) and to_date(\u0026#39;2020-12-31\u0026#39;,\u0026#39;yyyy-mm-dd\u0026#39;) and sex in (\u0026#39;男\u0026#39;,\u0026#39;女\u0026#39;)  where 可以从众多的资料中筛选出符号目标要求的资料，所以 where 在查询语句中是最复杂的。\n  我们在写 where 语句的时候，应该从简单语句开始写，分块写，防止多个筛选条件混合到一起。\n  比较运算符： 大于、小于、等于这些运算符在 where 中也可以写。  \u0026gt;=,\u0026lt;=,\u0026lt;\u0026gt;/!=\n 逻辑运算符： 多个运算符之间用and或者or相连。 括号会改变判断语句运算顺序  -- 年纪大于10岁或者小于5岁的女人 where (age \u0026gt; 10 or age \u0026lt; 5) and sex =\u0026#39;女\u0026#39; -- 年纪大于10岁的人或者小于5岁的女人 where age \u0026gt; 10 or (age \u0026lt; 5 and sex =\u0026#39;女\u0026#39;)  模糊查询： 字符串模糊查询，like 运算符， %匹配任意多(包括 0)个任意字符， _匹配一个任意字符  -- 匹配\u0026#39;张\u0026#39;开始的字符串 张三 张 张98ahs 等都符和 where name like \u0026#39;张%\u0026#39; -- 匹配\u0026#39;张\u0026#39;开始，且后面之后一个字符的字符串 张三 张四 张w 符和 张 张sw 不符合 where name like \u0026#39;张_\u0026#39; -- 匹配字符中有一个\u0026#39;h\u0026#39;和\u0026#39;o\u0026#39;,且\u0026#39;h\u0026#39;在\u0026#39;o\u0026#39;前面， hello hsasaodaidup ooohhooo 都符和 where name like \u0026#39;%h%o\u0026#39;  between 范围判断:  between 可以判断一个连续的区间，数值，日期，单个字符都可以判断。\n 这里的and 和上面的and不是同一个意思。\n -- 年纪在1到10之间 where age between 1 and 10  in 范围判断： in 判断一个值是否在某个范围之内，这个不是连续的，而是一个集合。  -- 年纪是1，2，10 where age in (1,2,10) -- 年纪不是18，19 where age not in (18,19) 顺序\u0026ndash;排序（order by）\r#\r\r 在 sql 语句的最后一步写，不一定是 where 后\n  可以不排序，此时数据库按照查出来的顺序排序\n order by name,age desc,id esc   多字段： 排序是按照字段先后顺序排，如果第一个字段有相同，才会按照第二个字段排序，第二个也相同，才会按第三个\u0026hellip;\n  顺序/倒叙: 顺序是按照 ASCII 表中数字大小排序的，中文是按照 GBK 表中数字大小排序的（既不是笔画也不是拼音）。\n  esc是顺序，desc是倒叙，如果补标注默认是esc倒叙\n"}]